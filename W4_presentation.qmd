---
title: "W4. Ego, Dyads and Triads"
format: 
  revealjs:
    theme: default
    slide-number: true
    chalkboard: true
execute:
  echo: true
  engine: knitr
  fig-align: center
  fig-asp: null
---

# Ego, Dyads and Triads {#ch6-Ego-Network-Data-R}

-   Cover the basics of ego network data, utilizing the **egor** package
-   Deals with how to exract Triads in a network with **sna** package
-   [OPTION] for Dyads 

## Working with Ego Network Data

-   Ego network data are based on a sample of individuals and are commonly used in the social sciences.

-   Each respondent (ego) reports on the people (alters) they are connected to, providing the local network around the focal respondent.

-   Ego network data offer only pieces of the whole network

## Working with Ego Network Data

-   Ego network data can be structured in a number of ways but will generally have 4 kinds of information:
    -   demographic, behavioral, etc. information on the **egos**
    -   demographic, behavioral, etc. information on the named **alters**
    -   information about the **relationship between ego and alter**
    -   information about the **relationships between the alters**

## Working with Ego Network Data

-   Work with ego network data from the GSS(General Social Survey)

    -   a file with the ego attributes

    -   a file with the alter(other) attributes

    -   a file with the alter-alter ties

```{r}
# a file with the ego attributes
url1 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/gss1985_ego_dat.csv"

ego_dat <- read.csv(file = url1, stringsAsFactors = F) 
```

## Load Dataset for Ego Attribute

First 10 rows of the ego data frame

```{r}
# CASEID : unique ID for each respondent
# NUMGIVEN : the number of alters named, Respondents could say they had 6+ alters but were only allowed to report on 5
ego_dat[1:10, c("CASEID", "AGE", "EDUC", "RACE", "SEX", "HAPPY", "NUMGIVEN")]
```

## Load Dataset for Ego Attribute

```{r}
# check if there is empty values
na_yn <-!is.na(ego_dat$NUMGIVEN)
# exclude the emply values
ego_dat <- ego_dat[na_yn, ]
```

## Load Dataset for Alter Attribute

```{r}
url2 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/gss1985_alter_dat.csv"

alter_dat <- read.csv(file = url2, stringsAsFactors = F)
```

## Load Dataset for Alter Attribute

```{r}
# each row corresponds to a different named alter
# Each alter is denoted by an ALTERID (CASEID : ALTERID = 1:N)
# KIN : 1(True) if ego is relatives with that alter
# respondent 1 (CASEID = 19850001) names 5 alters. The first alter (ALTERID = 1) is 32, has 18 years of education, and is not kin to ego.
alter_dat[1:10, c("CASEID", "ALTERID", "AGE", "EDUC", "RACE", "SEX", "KIN")] 
```

## Load Dataset for Alter-Alter Tie

```{r}
url3 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/gss1985_alteralter_dat.csv"

alteralter_dat <- read.csv(file = url3)
```

## Load Dataset for Alter-Alter Tie

-   the ties between the named alters

```{r}
# `CASEID` : relevant ego 
# `ALTER1` : first alter in the dyad
# `ALTER2` : second alter in the dyad
# `Weight` : nature of the relationship (1 : alters know each other, 2: especially close)
alteralter_dat[1:10, ]
```

## Let's make Ego Network

-   transforming traditional survey data into something that has the structure of a network 🤯🤯🤯🤯🤯
-   🍀🍀**egor**🍀🍀 package has made the task of constructing ego networks from survey data much easier

```{r message=F, warning=F}
# load a package for constructing ego network
library(egor)
```

## Let's make Ego Network

-   construct an egor object from our survey data

```{r message=F, warning=F}
# `egor()` : input the data using three separate files.

egonetlist <-  egor(alters = alter_dat, # alter attributes data frame
                    egos = ego_dat, # ego attributes data frame
                    aaties = alteralter_dat, # alter-alter tie data frame
                    alter_design = list(max = 5), # list of arguments to specify nomination information from survey
                    # list of variable names corresponding to key columns
                    ID.vars = list(ego = "CASEID", alter ="ALTERID", 
                                   source = "ALTER1", target = "ALTER2") 
                    ) 
```

## Calculate Summary Statistics

-   We will begin with density, showing the proportion of alter-alter ties that exist in each ego network
-   By the way, What is the definition of density?🤨


## Calculate Summary Statistics

-   a measure for overall level of connection among nodes in a network 
- \(m\) = number of edges  
- \(n\) = number of nodes  
$$
Dentisy = \frac{2m}{n(n-1)}
$$

```{r message=F, warning=F}
# use `ego_density()` function
dens <- ego_density(egonetlist)
```

## Calculate Summary Statistics

```{r}
# we calculated the density of every ego network
head(dens)
```

## Plotting Ego Networks

-   go over how to plot the ego networks using packages like **igraph**

```{r message=F, warning=F}
library(igraph)
```

## Plotting Ego Networks

-   convert the **egor** object to **igraph** objects.

```{r}
igraph_nets <- as_igraph(egonetlist, include.ego = TRUE)
```

## Plotting Ego Networks
Now, let’s take a look at the first three ego networks.
```{r}
igraph_nets[1:3] 
```

## Plotting Ego Networks

let's plot a couple of example networks, focusing on the first 3 ego networks.

```{r}
# set 1 row, 3 column grid for visualization layout
par(mfrow = c(1, 3))
# draw graphs in igraph_nets variable
purrr::walk(igraph_nets[1:3], plot)
```

## Plotting Ego Networks

-   Let's color the nodes based on gender
-   so we can get a sense of the level of gender homogeneity in these ego networks

```{r}
# somewhat more difficult task than with a single network
# defind a function to set the color for each network
plotfunc_colorgender <- function(nets){ 
  # Arguments: 
  # nets: ego network of interest
  
  # extracting the attribute from the ego network:
  cols <- vertex_attr(nets, "SEX") 

  # now we use an ifelse statement to set color,
  # light sky blue if gender equals female, blue otherwise:
  cols <- ifelse(cols == "female", "lightskyblue", "blue")

  # plotting ego network with nodes colored based on gender:
  plot(nets, vertex.color = cols) 
}
```

## Plotting Ego Networks

-   Now let’s run `plotfunc_colorgender()` over the first three ego networks.

```{r}
# third ego network is homogenous in terms of gender
# the first two are quite heterogeneous
# first ego network is complete
par(mfrow = c(1, 3))
purrr::walk(igraph_nets[1:3], plotfunc_colorgender)
```

# Triads

* help us study the small-scale pattern that explain why certain people connect with each other(how ties form in a network)
* The data are based on three relations collected on workers in a single organization
* Our main objective is what kind of rules of interaction do we see in our friendship and advice networks
  * i.e. do we see the same behavioral rules being followed when examining advice compared to friendship? 

## Triadic Processes
* work primarily with the **sna** package [@sna], so let's start by loading that package.

```{r message=F, warning=F}
library(sna)
```

## Triadic Processes

* download three datasets(1. friends 2. advice 3. attributes)

```{r}
url1 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/krackhardt_advice.csv"
url2 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/krackhardt_attributes.csv"
url3 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/krackhardt_friendship.csv"

advice_data_frame <- read.csv(file = url1) 
attributes <- read.csv(file = url2)
friends_data_frame <- read.csv(file = url3)

# extract only Ture relationship
advice_edgelist <- advice_data_frame[advice_data_frame$advice_tie == 1, ]
friends_edgelist <- friends_data_frame[friends_data_frame$friendship_tie == 1, ]
```

## Triadic Processes
Let's take a look at the dataset, one by one 
```{r}
# ego 1 said he or she gives advice from alter 2,4,8,16,21
head(advice_edgelist)
```
## Triadic Processes
Let's take a look at the dataset, one by one 
```{r}
# ego 1 said he or she is friend with alter 2,4,8,12,16
head(friends_edgelist)
```

## Triadic Processes
Let's take a look at the dataset, one by one 
```{r}
# attributes for each resopondent
head(attributes)
```

## Triadic Processes
* We now construct the network , as before, using the `network()` function.

```{r}
krack_friendship <-  network(x = friends_edgelist, directed = T, 
                             vertices = attributes)
krack_advice <- network(x = advice_edgelist, directed = T, 
                        vertices = attributes) 
```

## Triad Census

* The triad census captures the distribution of triads across 16 basic types, representing different patterns of interaction between the three nodes
* There are 16 different triad types:

![The Sixteen types of traiads for directed networks](https://raw.githubusercontent.com/ComputationalSociologyLab/SNA_fall_2025/main/img/triad.png){width=30%}

## Triad Census

-   compare the triad counts across the two network relations, to see if the patterns differ for friendship compared to advice

```{r}
# `triad.census()` function outputs the counts in each triad type
triads_advice <- triad.census(krack_advice) 
triads_advice
```

## Triad Census
And now for friendship :
```{r}
# `triad.census()` function outputs the counts in each triad type
triads_friendship <- triad.census(krack_friendship)
triads_friendship
```

## Triad Census

Let's make a table to make the comparisons easier.

```{r}
triad_data <- data.frame(advice = t(triads_advice), 
                         friendship = t(triads_friendship))
```

## Triad Census

```{r}
triad_data
```

## Triad Census
* one striking difference : The advice network has a much higher proportion of 030T triads than the friendship network
![The Sixteen types of traiads for directed networks](https://raw.githubusercontent.com/ComputationalSociologyLab/SNA_fall_2025/main/img/030T.png)

## Triad Census
* The underlying hierarchy in this advice relation thus runs: A to C to B, as A influences B and C, C influences only B and B influences no one
* Such a pattern of hierarchy does not emerge as clearly in the friendship network

![The Sixteen types of traiads for directed networks](https://raw.githubusercontent.com/ComputationalSociologyLab/SNA_fall_2025/main/img/030T_ABC.jpeg){width=30%}

## Triad Census
* The triads associated with transitive dominance relations are more likely to be present in the advice network than the friendship network

![The Sixteen types of traiads for directed networks](https://raw.githubusercontent.com/ComputationalSociologyLab/SNA_fall_2025/main/img/triad_advice.jpg){width=30%}



## Done!

-   Please check KLMS for the assignment of this week(til Friday)

-   If you want to study in-depth knowledge for the ego network, dyad, and triad network, please check this week \[Option\] in the assignment

