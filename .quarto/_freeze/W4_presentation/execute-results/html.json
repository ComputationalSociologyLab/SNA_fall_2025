{
  "hash": "3df5aa58b317fd87a883151d7309da62",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"W4. Ego, Dyads and Triads\"\nformat: \n  revealjs:\n    theme: default\n    slide-number: true\n    chalkboard: true\nexecute:\n  echo: true\n  engine: knitr\n  fig-align: center\n  fig-asp: null\n---\n\n# Ego, Dyads and Triads {#ch6-Ego-Network-Data-R}\n\n-   Cover the basics of ego network data, utilizing the **egor** package\n-   Deals with how to exract Triads in a network with **sna** package\n-   [OPTION] for Dyads \n\n## Working with Ego Network Data\n\n-   Ego network data are based on a sample of individuals and are commonly used in the social sciences.\n\n-   Each respondent (ego) reports on the people (alters) they are connected to, providing the local network around the focal respondent.\n\n-   Ego network data offer only pieces of the whole network\n\n## Working with Ego Network Data\n\n-   Ego network data can be structured in a number of ways but will generally have 4 kinds of information:\n    -   demographic, behavioral, etc. information on the **egos**\n    -   demographic, behavioral, etc. information on the named **alters**\n    -   information about the **relationship between ego and alter**\n    -   information about the **relationships between the alters**\n\n## Working with Ego Network Data\n\n-   Work with ego network data from the GSS(General Social Survey)\n\n    -   a file with the ego attributes\n\n    -   a file with the alter(other) attributes\n\n    -   a file with the alter-alter ties\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# a file with the ego attributes\nurl1 <- \"https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/gss1985_ego_dat.csv\"\n\nego_dat <- read.csv(file = url1, stringsAsFactors = F) \n```\n:::\n\n\n## Load Dataset for Ego Attribute\n\nFirst 10 rows of the ego data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# CASEID : unique ID for each respondent\n# NUMGIVEN : the number of alters named, Respondents could say they had 6+ alters but were only allowed to report on 5\nego_dat[1:10, c(\"CASEID\", \"AGE\", \"EDUC\", \"RACE\", \"SEX\", \"HAPPY\", \"NUMGIVEN\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     CASEID AGE EDUC  RACE    SEX HAPPY NUMGIVEN\n1  19850001  33   16 white   male     2        6\n2  19850002  49   19 white   male     2        6\n3  19850003  23   16 white female     2        5\n4  19850004  26   20 white female     2        5\n5  19850005  24   17 white female     2        5\n6  19850006  45   17 white   male     2        4\n7  19850007  44   18 white female     2        6\n8  19850008  56   12 white female     2        5\n9  19850009  85    7 white female     2        2\n10 19850010  65   12 white female     2        2\n```\n\n\n:::\n:::\n\n\n## Load Dataset for Ego Attribute\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# check if there is empty values\nna_yn <-!is.na(ego_dat$NUMGIVEN)\n# exclude the emply values\nego_dat <- ego_dat[na_yn, ]\n```\n:::\n\n\n## Load Dataset for Alter Attribute\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl2 <- \"https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/gss1985_alter_dat.csv\"\n\nalter_dat <- read.csv(file = url2, stringsAsFactors = F)\n```\n:::\n\n\n## Load Dataset for Alter Attribute\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# each row corresponds to a different named alter\n# Each alter is denoted by an ALTERID (CASEID : ALTERID = 1:N)\n# KIN : 1(True) if ego is relatives with that alter\n# respondent 1 (CASEID = 19850001) names 5 alters. The first alter (ALTERID = 1) is 32, has 18 years of education, and is not kin to ego.\nalter_dat[1:10, c(\"CASEID\", \"ALTERID\", \"AGE\", \"EDUC\", \"RACE\", \"SEX\", \"KIN\")] \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     CASEID ALTERID AGE EDUC  RACE    SEX KIN\n1  19850001       1  32   18 white   male   0\n2  19850001       2  29   16 white female   1\n3  19850001       3  32   18 white   male   0\n4  19850001       4  35   16 white   male   1\n5  19850001       5  29   13 white female   0\n6  19850002       1  42   12 white female   1\n7  19850002       2  44   18 white   male   0\n8  19850002       3  45   16 white   male   0\n9  19850002       4  40   12 white female   0\n10 19850002       5  50   18 white   male   0\n```\n\n\n:::\n:::\n\n\n## Load Dataset for Alter-Alter Tie\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl3 <- \"https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/gss1985_alteralter_dat.csv\"\n\nalteralter_dat <- read.csv(file = url3)\n```\n:::\n\n\n## Load Dataset for Alter-Alter Tie\n\n-   the ties between the named alters\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# `CASEID` : relevant ego \n# `ALTER1` : first alter in the dyad\n# `ALTER2` : second alter in the dyad\n# `Weight` : nature of the relationship (1 : alters know each other, 2: especially close)\nalteralter_dat[1:10, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     CASEID ALTER1 ALTER2 WEIGHT\n1  19850001      1      2      2\n2  19850001      1      3      1\n3  19850001      1      4      1\n4  19850001      1      5      1\n5  19850001      2      3      2\n6  19850001      2      4      2\n7  19850001      2      5      2\n8  19850001      3      4      1\n9  19850001      3      5      1\n10 19850001      4      5      1\n```\n\n\n:::\n:::\n\n\n## Let's make Ego Network\n\n-   transforming traditional survey data into something that has the structure of a network 🤯🤯🤯🤯🤯\n-   🍀🍀**egor**🍀🍀 package has made the task of constructing ego networks from survey data much easier\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load a package for constructing ego network\nlibrary(egor)\n```\n:::\n\n\n## Let's make Ego Network\n\n-   construct an egor object from our survey data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# `egor()` : input the data using three separate files.\n\negonetlist <-  egor(alters = alter_dat, # alter attributes data frame\n                    egos = ego_dat, # ego attributes data frame\n                    aaties = alteralter_dat, # alter-alter tie data frame\n                    alter_design = list(max = 5), # list of arguments to specify nomination information from survey\n                    # list of variable names corresponding to key columns\n                    ID.vars = list(ego = \"CASEID\", alter =\"ALTERID\", \n                                   source = \"ALTER1\", target = \"ALTER2\") \n                    ) \n```\n:::\n\n\n## Calculate Summary Statistics\n\n-   We will begin with density, showing the proportion of alter-alter ties that exist in each ego network\n-   By the way, What is the definition of density?🤨\n\n\n## Calculate Summary Statistics\n\n-   a measure for overall level of connection among nodes in a network \n- \\(m\\) = number of edges  \n- \\(n\\) = number of nodes  \n$$\nDentisy = \\frac{2m}{n(n-1)}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# use `ego_density()` function\ndens <- ego_density(egonetlist)\n```\n:::\n\n\n## Calculate Summary Statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# we calculated the density of every ego network\nhead(dens)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n    .egoID density\n     <int>   <dbl>\n1 19850001   1    \n2 19850002   0.8  \n3 19850003   0.6  \n4 19850004   0.6  \n5 19850005   1    \n6 19850006   0.667\n```\n\n\n:::\n:::\n\n\n## Plotting Ego Networks\n\n-   go over how to plot the ego networks using packages like **igraph**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\n```\n:::\n\n\n## Plotting Ego Networks\n\n-   convert the **egor** object to **igraph** objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nigraph_nets <- as_igraph(egonetlist, include.ego = TRUE)\n```\n:::\n\n\n## Plotting Ego Networks\nNow, let’s take a look at the first three ego networks.\n\n::: {.cell}\n\n```{.r .cell-code}\nigraph_nets[1:3] \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`19850001`\nIGRAPH 7a543d6 UN-- 6 15 -- \n+ attr: .egoID (g/n), name (v/c), AGE (v/n), EDUC (v/n), RACE (v/c),\n| SEX (v/c), RELIG (v/c), AGE_CATEGORICAL (v/c), EDUC_CATEGORICAL\n| (v/c), TALKTO (v/n), SPOUSE (v/n), KIN (v/n), WEIGHT (e/n)\n+ edges from 7a543d6 (vertex names):\n [1] 1--2   1--3   1--4   1--5   2--3   2--4   2--5   3--4   3--5   4--5  \n[11] 1--ego 2--ego 3--ego 4--ego 5--ego\n\n$`19850002`\nIGRAPH 3c37df1 UN-- 6 13 -- \n+ attr: .egoID (g/n), name (v/c), AGE (v/n), EDUC (v/n), RACE (v/c),\n| SEX (v/c), RELIG (v/c), AGE_CATEGORICAL (v/c), EDUC_CATEGORICAL\n| (v/c), TALKTO (v/n), SPOUSE (v/n), KIN (v/n), WEIGHT (e/n)\n+ edges from 3c37df1 (vertex names):\n [1] 1--2   1--3   1--4   1--5   2--4   3--4   3--5   4--5   1--ego 2--ego\n[11] 3--ego 4--ego 5--ego\n\n$`19850003`\nIGRAPH ab6842c UN-- 6 11 -- \n+ attr: .egoID (g/n), name (v/c), AGE (v/n), EDUC (v/n), RACE (v/c),\n| SEX (v/c), RELIG (v/c), AGE_CATEGORICAL (v/c), EDUC_CATEGORICAL\n| (v/c), TALKTO (v/n), SPOUSE (v/n), KIN (v/n), WEIGHT (e/n)\n+ edges from ab6842c (vertex names):\n [1] 1--2   1--3   1--4   2--3   2--4   3--4   1--ego 2--ego 3--ego 4--ego\n[11] 5--ego\n```\n\n\n:::\n:::\n\n\n## Plotting Ego Networks\n\nlet's plot a couple of example networks, focusing on the first 3 ego networks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set 1 row, 3 column grid for visualization layout\npar(mfrow = c(1, 3))\n# draw graphs in igraph_nets variable\npurrr::walk(igraph_nets[1:3], plot)\n```\n\n::: {.cell-output-display}\n![](W4_presentation_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n## Plotting Ego Networks\n\n-   Let's color the nodes based on gender\n-   so we can get a sense of the level of gender homogeneity in these ego networks\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# somewhat more difficult task than with a single network\n# defind a function to set the color for each network\nplotfunc_colorgender <- function(nets){ \n  # Arguments: \n  # nets: ego network of interest\n  \n  # extracting the attribute from the ego network:\n  cols <- vertex_attr(nets, \"SEX\") \n\n  # now we use an ifelse statement to set color,\n  # light sky blue if gender equals female, blue otherwise:\n  cols <- ifelse(cols == \"female\", \"lightskyblue\", \"blue\")\n\n  # plotting ego network with nodes colored based on gender:\n  plot(nets, vertex.color = cols) \n}\n```\n:::\n\n\n## Plotting Ego Networks\n\n-   Now let’s run `plotfunc_colorgender()` over the first three ego networks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# third ego network is homogenous in terms of gender\n# the first two are quite heterogeneous\n# first ego network is complete\npar(mfrow = c(1, 3))\npurrr::walk(igraph_nets[1:3], plotfunc_colorgender)\n```\n\n::: {.cell-output-display}\n![](W4_presentation_files/figure-revealjs/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n\n\n# Triads\n\n* help us study the small-scale pattern that explain why certain people connect with each other(how ties form in a network)\n* The data are based on three relations collected on workers in a single organization\n* Our main objective is what kind of rules of interaction do we see in our friendship and advice networks\n  * i.e. do we see the same behavioral rules being followed when examining advice compared to friendship? \n\n## Triadic Processes\n* work primarily with the **sna** package [@sna], so let's start by loading that package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sna)\n```\n:::\n\n\n## Triadic Processes\n\n* download three datasets(1. friends 2. advice 3. attributes)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl1 <- \"https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/krackhardt_advice.csv\"\nurl2 <- \"https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/krackhardt_attributes.csv\"\nurl3 <- \"https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/krackhardt_friendship.csv\"\n\nadvice_data_frame <- read.csv(file = url1) \nattributes <- read.csv(file = url2)\nfriends_data_frame <- read.csv(file = url3)\n\n# extract only Ture relationship\nadvice_edgelist <- advice_data_frame[advice_data_frame$advice_tie == 1, ]\nfriends_edgelist <- friends_data_frame[friends_data_frame$friendship_tie == 1, ]\n```\n:::\n\n\n## Triadic Processes\nLet's take a look at the dataset, one by one \n\n::: {.cell}\n\n```{.r .cell-code}\n# ego 1 said he or she gives advice from alter 2,4,8,16,21\nhead(advice_edgelist)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ego alter advice_tie\n2    1     2          1\n4    1     4          1\n8    1     8          1\n16   1    16          1\n18   1    18          1\n21   1    21          1\n```\n\n\n:::\n:::\n\n## Triadic Processes\nLet's take a look at the dataset, one by one \n\n::: {.cell}\n\n```{.r .cell-code}\n# ego 1 said he or she is friend with alter 2,4,8,12,16\nhead(friends_edgelist)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ego alter friendship_tie\n2    1     2              1\n4    1     4              1\n8    1     8              1\n12   1    12              1\n16   1    16              1\n22   2     1              1\n```\n\n\n:::\n:::\n\n\n## Triadic Processes\nLet's take a look at the dataset, one by one \n\n::: {.cell}\n\n```{.r .cell-code}\n# attributes for each resopondent\nhead(attributes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  ids AGE TENURE LEVEL DEPT\n1   1  33  9.333     3    4\n2   2  42 19.583     2    4\n3   3  40 12.750     3    2\n4   4  33  7.500     3    4\n5   5  32  3.333     3    2\n6   6  59 28.000     3    1\n```\n\n\n:::\n:::\n\n\n## Triadic Processes\n* We now construct the network , as before, using the `network()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkrack_friendship <-  network(x = friends_edgelist, directed = T, \n                             vertices = attributes)\nkrack_advice <- network(x = advice_edgelist, directed = T, \n                        vertices = attributes) \n```\n:::\n\n\n## Triad Census\n\n* The triad census captures the distribution of triads across 16 basic types, representing different patterns of interaction between the three nodes\n* There are 16 different triad types:\n\n![](https://raw.githubusercontent.com/ComputationalSociologyLab/SNA_fall_2025/main/img/triad.png){width=30%}\n\n## Triad Census\n\n-   compare the triad counts across the two network relations, to see if the patterns differ for friendship compared to advice\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# `triad.census()` function outputs the counts in each triad type\ntriads_advice <- triad.census(krack_advice) \ntriads_advice\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U 120C 210 300\n[1,]  74 153  90  160   86   49   59  101  190    2  72   62   78   17 107  30\n```\n\n\n:::\n:::\n\n\n## Triad Census\nAnd now for friendship :\n\n::: {.cell}\n\n```{.r .cell-code}\n# `triad.census()` function outputs the counts in each triad type\ntriads_friendship <- triad.census(krack_friendship)\ntriads_friendship\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U 120C 210 300\n[1,] 376 366 143  114   34   35   39  101   23    0  20   16   25    9  23   6\n```\n\n\n:::\n:::\n\n\n## Triad Census\n\nLet's make a table to make the comparisons easier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntriad_data <- data.frame(advice = t(triads_advice), \n                         friendship = t(triads_friendship))\n```\n:::\n\n\n## Triad Census\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntriad_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     advice friendship\n003      74        376\n012     153        366\n102      90        143\n021D    160        114\n021U     86         34\n021C     49         35\n111D     59         39\n111U    101        101\n030T    190         23\n030C      2          0\n201      72         20\n120D     62         16\n120U     78         25\n120C     17          9\n210     107         23\n300      30          6\n```\n\n\n:::\n:::\n\n\n## Triad Census\n* one striking difference : The advice network has a much higher proportion of 030T triads than the friendship network\n![](https://raw.githubusercontent.com/ComputationalSociologyLab/SNA_fall_2025/main/img/030T.png)\n\n## Triad Census\n* The underlying hierarchy in this advice relation thus runs: A to C to B, as A influences B and C, C influences only B and B influences no one\n* Such a pattern of hierarchy does not emerge as clearly in the friendship network\n\n![](https://raw.githubusercontent.com/ComputationalSociologyLab/SNA_fall_2025/main/img/030T_ABC.jpeg){width=30%}\n\n## Triad Census\n* The triads associated with transitive dominance relations are more likely to be present in the advice network than the friendship network\n\n![](https://raw.githubusercontent.com/ComputationalSociologyLab/SNA_fall_2025/main/img/triad_advice.jpg){width=30%}\n\n\n\n## Done!\n\n-   Please check KLMS for the assignment of this week(til Friday)\n\n-   If you want to study in-depth knowledge for the ego network, dyad, and triad network, please check this week \\[Option\\] in the assignment\n\n",
    "supporting": [
      "W4_presentation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}