{"title":"W4. Ego Network Data","markdown":{"yaml":{"title":"W4. Ego Network Data","format":{"revealjs":{"theme":"default","slide-number":true,"chalkboard":true}},"execute":{"echo":true,"engine":"knitr","fig-align":"center","fig-asp":null}},"headingText":"Ego Network Data","headingAttr":{"id":"ch6-Ego-Network-Data-R","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n\n-   Cover the basics of ego network data, utilizing the **egor** package\n\n-   Construct and visualize ego networks\n\n## Working with Ego Network Data\n\n-   Ego network data are based on a sample of individuals and are commonly used in the social sciences.\n\n-   Each respondent (ego) reports on the people (alters) they are connected to, providing the local network around the focal respondent.\n\n-   Ego network data offer only pieces of the whole network\n\n## Working with Ego Network Data\n\n-   Ego network data can be structured in a number of ways but will generally have 4 kinds of information:\n\n  -   demographic, behavioral, etc. information on the **egos**\n  -   demographic, behavioral, etc. information on the named **alters**\n  -   information about the **relationship between ego and alter**\n  -   information about the **relationships between the alters**\n\n## Working with Ego Network Data\n\n-   Work with ego network data from the GSS(General Social Survey)\n\n    -   a file with the ego attributes\n\n    -   a file with the alter(other) attributes\n\n    -   a file with the alter-alter ties\n\n```{r}\n# a file with the ego attributes\nurl1 <- \"https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/gss1985_ego_dat.csv\"\n\nego_dat <- read.csv(file = url1, stringsAsFactors = F) \n```\n\n## Load Dataset for Ego Attribute\n\nFirst 10 rows of the ego data frame\n\n```{r}\n# CASEID : unique ID for each respondent\n# NUMGIVEN : the number of alters named\nego_dat[1:10, c(\"CASEID\", \"AGE\", \"EDUC\", \"RACE\", \"SEX\", \"HAPPY\", \"NUMGIVEN\")]\n```\n\n## Load Dataset for Ego Attribute\n\n```{r}\n# check if there is empty values\nna_yn <-!is.na(ego_dat$NUMGIVEN)\n# exclude the emply values\nego_dat <- ego_dat[na_yn, ]\n```\n\n## Load Dataset for Alter Attribute\n\n```{r}\nurl2 <- \"https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/gss1985_alter_dat.csv\"\n\nalter_dat <- read.csv(file = url2, stringsAsFactors = F)\n```\n\n## Load Dataset for Alter Attribute\n\n```{r}\n# each row corresponds to a different named alter\n# Each alter is denoted by an ALTERID (CASEID : ALTERID = 1:N)\n# KIN : 1(True) if ego is relatives with that alter\n# respondent 1 (CASEID = 19850001) names 5 alters. The first alter (ALTERID = 1) is 32, has 18 years of education, and is not kin to ego.\nalter_dat[1:10, c(\"CASEID\", \"ALTERID\", \"AGE\", \"EDUC\", \"RACE\", \"SEX\", \"KIN\")] \n```\n\n## Load Dataset for Alter-Alter Tie\n\n```{r}\nurl3 <- \"https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/gss1985_alteralter_dat.csv\"\n\nalteralter_dat <- read.csv(file = url3)\n```\n\n## Load Dataset for Alter-Alter Tie\n\n-   the ties between the named alters\n\n```{r}\n# `CASEID` : relevant ego \n# `ALTER1` : first alter in the dyad\n# `ALTER2` : second alter in the dyad\n# `Weight` : nature of the relationship (1 : alters know each other, 2: especially close)\nalteralter_dat[1:10, ]\n```\n\n## Let's make Ego Network\n\n-   transforming traditional survey data into something that has the structure of a network 🤯🤯🤯🤯🤯\n-   🍀🍀**egor**🍀🍀 package has made the task of constructing ego networks from survey data much easier\n\n```{r message=F, warning=F}\n# load a package for constructing ego network\nlibrary(egor)\n```\n\n## Let's make Ego Network\n\n-   construct an egor object from our survey data\n\n```{r message=F, warning=F}\n# `egor()` : input the data using three separate files.\n\negonetlist <-  egor(alters = alter_dat, # alter attributes data frame\n                    egos = ego_dat, # ego attributes data frame\n                    aaties = alteralter_dat, # alter-alter tie data frame\n                    alter_design = list(max = 5), # list of arguments to specify nomination information from survey\n                    # list of variable names corresponding to key columns\n                    ID.vars = list(ego = \"CASEID\", alter =\"ALTERID\", \n                                   source = \"ALTER1\", target = \"ALTER2\") \n                    ) \n```\n\n## Calculate Summary Statistics\n\n-   We will begin with density, showing the proportion of alter-alter ties that exist in each ego network\n-   By the way, What is the definition of density?🤨\n\n\n## Calculate Summary Statistics\n\n-   a measure for overall level of connection among nodes in a network \n- \\(m\\) = number of edges  \n- \\(n\\) = number of nodes  \n$$\nDentisy = \\frac{2m}{n(n-1)}\n$$\n\n```{r message=F, warning=F}\n# use `ego_density()` function\ndens <- ego_density(egonetlist)\n```\n\n## Calculate Summary Statistics\n\n```{r}\n# we calculated the density of every ego network\nhead(dens)\n```\n\n## Plotting Ego Networks\n\n-   go over how to plot the ego networks using packages like **igraph**\n\n```{r message=F, warning=F}\nlibrary(igraph)\n```\n\n## Plotting Ego Networks\n\n-   convert the **egor** object to **igraph** objects.\n\n```{r}\nigraph_nets <- as_igraph(egonetlist, include.ego = TRUE)\n```\n\n## Plotting Ego Networks\nNow, let’s take a look at the first three ego networks.\n```{r}\nigraph_nets[1:3] \n```\n\n## Plotting Ego Networks\n\nlet's plot a couple of example networks, focusing on the first 3 ego networks.\n\n```{r}\n# set 1 row, 3 column grid for visualization layout\npar(mfrow = c(1, 3))\n# draw graphs in igraph_nets variable\npurrr::walk(igraph_nets[1:3], plot)\n```\n\n## Plotting Ego Networks\n\n-   Let's color the nodes based on gender\n-   so we can get a sense of the level of gender homogeneity in these ego networks\n\n```{r}\n# somewhat more difficult task than with a single network\n# defind a function to set the color for each network\nplotfunc_colorgender <- function(nets){ \n  # Arguments: \n  # nets: ego network of interest\n  \n  # extracting the attribute from the ego network:\n  cols <- vertex_attr(nets, \"SEX\") \n\n  # now we use an ifelse statement to set color,\n  # light sky blue if gender equals female, blue otherwise:\n  cols <- ifelse(cols == \"female\", \"lightskyblue\", \"blue\")\n\n  # plotting ego network with nodes colored based on gender:\n  plot(nets, vertex.color = cols) \n}\n```\n\n## Plotting Ego Networks\n\n-   Now let’s run `plotfunc_colorgender()` over the first three ego networks.\n\n```{r}\n# third ego network is homogenous in terms of gender\n# the first two are quite heterogeneous\n# first ego network is complete\npar(mfrow = c(1, 3))\npurrr::walk(igraph_nets[1:3], plotfunc_colorgender)\n```\n\n# Triads\n\n* help us study the small-scale pattern that explain why certain people connect with each other(how ties form in a network)\n* The data are based on three relations collected on workers in a single organization\n* Our main objective is what kind of rules of interaction do we see in our friendship and advice networks\n  * i.e. do we see the same behavioral rules being followed when examining advice compared to friendship? \n\n## Triadic Processes\n* work primarily with the **sna** package [@sna], so let's start by loading that package.\n\n```{r message=F, warning=F}\nlibrary(sna)\n```\n\n## Triadic Processes\n\n* download three datasets(1. friends 2. advice 3. attributes)\n\n```{r}\nurl1 <- \"https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/krackhardt_advice.csv\"\nurl2 <- \"https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/krackhardt_attributes.csv\"\nurl3 <- \"https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/krackhardt_friendship.csv\"\n\nadvice_data_frame <- read.csv(file = url1) \nattributes <- read.csv(file = url2)\nfriends_data_frame <- read.csv(file = url3)\n\n# extract only Ture relationship\nadvice_edgelist <- advice_data_frame[advice_data_frame$advice_tie == 1, ]\nfriends_edgelist <- friends_data_frame[friends_data_frame$friendship_tie == 1, ]\n```\n\n## Triadic Processes\nLet's take a look at the dataset, one by one \n```{r}\n# ego 1 said he or she gets advice from alter 2,4,8,16,21\nhead(advice_edgelist)\n```\n## Triadic Processes\nLet's take a look at the dataset, one by one \n```{r}\n# ego 1 said he or she is friend with alter 2,4,8,12,16\nhead(friends_edgelist)\n```\n\n## Triadic Processes\nLet's take a look at the dataset, one by one \n```{r}\n# attributes for each resopondent\nhead(attributes)\n```\n\n## Triadic Processes\n* We now construct the network , as before, using the `network()` function.\n\n```{r}\nkrack_friendship <-  network(x = friends_edgelist, directed = T, \n                             vertices = attributes)\nkrack_advice <- network(x = advice_edgelist, directed = T, \n                        vertices = attributes) \n```\n\n## Triad Census\n\n* The triad census captures the distribution of triads across 16 basic types, representing different patterns of interaction between the three nodes\n* There are 16 different triad types:\n![The Sixteen types of traiads for directed networks](https://raw.githubusercontent.com/ComputationalSociologyLab/SNA_fall_2025/main/img/triad.png)\n\n## Triad Census\n\n-   compare the triad counts across the two network relations, to see if the patterns differ for friendship compared to advice\n\n```{r}\n# `triad.census()` function outputs the counts in each triad type\ntriads_advice <- triad.census(krack_advice) \ntriads_advice\n```\n\n## Triad Census\nAnd now for friendship :\n```{r}\n# `triad.census()` function outputs the counts in each triad type\ntriads_friendship <- triad.census(krack_friendship)\ntriads_friendship\n```\n\n## Triad Census\n\nLet's make a table to make the comparisons easier.\n\n```{r}\ntriad_data <- data.frame(advice = t(triads_advice), \n                         friendship = t(triads_friendship))\n```\n\n## Triad Census\n\n```{r}\ntriad_data\n```\n\n## Triad Census\n* one striking difference : The advice network has a much higher proportion of 030T triads than the friendship network\n![The Sixteen types of traiads for directed networks](https://raw.githubusercontent.com/ComputationalSociologyLab/SNA_fall_2025/main/img/030T.png)\n\n## Triad Census\n* The underlying hierarchy in this advice relation thus runs: A to C to B, as A influences B and C, C influences only B and B influences no one\n* Such a pattern of hierarchy does not emerge as clearly in the friendship network\n![The Sixteen types of traiads for directed networks](https://raw.githubusercontent.com/ComputationalSociologyLab/SNA_fall_2025/main/img/030T.png)\n\n## Triad Census\n* the triads associated with transitive dominance relations are more likely to be present in the advice network than the friendship network\n![The Sixteen types of traiads for directed networks](https://raw.githubusercontent.com/ComputationalSociologyLab/SNA_fall_2025/main/img/triad_advice.jpg)\n\n* Note that we need to be a little careful in pushing that conclusion too far, as the networks have different levels of density that may be driving the differences we observe in the triad count\n\n\n\n## Done!\n\n-   Please check KLMS for the assignment of this week\n\n-   If you want to study in-depth knowledge for the ego network, diad, and triad network, please check this week \\[Option\\]\n\n","srcMarkdownNoYaml":"\n\n# Ego Network Data {#ch6-Ego-Network-Data-R}\n\n-   Cover the basics of ego network data, utilizing the **egor** package\n\n-   Construct and visualize ego networks\n\n## Working with Ego Network Data\n\n-   Ego network data are based on a sample of individuals and are commonly used in the social sciences.\n\n-   Each respondent (ego) reports on the people (alters) they are connected to, providing the local network around the focal respondent.\n\n-   Ego network data offer only pieces of the whole network\n\n## Working with Ego Network Data\n\n-   Ego network data can be structured in a number of ways but will generally have 4 kinds of information:\n\n  -   demographic, behavioral, etc. information on the **egos**\n  -   demographic, behavioral, etc. information on the named **alters**\n  -   information about the **relationship between ego and alter**\n  -   information about the **relationships between the alters**\n\n## Working with Ego Network Data\n\n-   Work with ego network data from the GSS(General Social Survey)\n\n    -   a file with the ego attributes\n\n    -   a file with the alter(other) attributes\n\n    -   a file with the alter-alter ties\n\n```{r}\n# a file with the ego attributes\nurl1 <- \"https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/gss1985_ego_dat.csv\"\n\nego_dat <- read.csv(file = url1, stringsAsFactors = F) \n```\n\n## Load Dataset for Ego Attribute\n\nFirst 10 rows of the ego data frame\n\n```{r}\n# CASEID : unique ID for each respondent\n# NUMGIVEN : the number of alters named\nego_dat[1:10, c(\"CASEID\", \"AGE\", \"EDUC\", \"RACE\", \"SEX\", \"HAPPY\", \"NUMGIVEN\")]\n```\n\n## Load Dataset for Ego Attribute\n\n```{r}\n# check if there is empty values\nna_yn <-!is.na(ego_dat$NUMGIVEN)\n# exclude the emply values\nego_dat <- ego_dat[na_yn, ]\n```\n\n## Load Dataset for Alter Attribute\n\n```{r}\nurl2 <- \"https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/gss1985_alter_dat.csv\"\n\nalter_dat <- read.csv(file = url2, stringsAsFactors = F)\n```\n\n## Load Dataset for Alter Attribute\n\n```{r}\n# each row corresponds to a different named alter\n# Each alter is denoted by an ALTERID (CASEID : ALTERID = 1:N)\n# KIN : 1(True) if ego is relatives with that alter\n# respondent 1 (CASEID = 19850001) names 5 alters. The first alter (ALTERID = 1) is 32, has 18 years of education, and is not kin to ego.\nalter_dat[1:10, c(\"CASEID\", \"ALTERID\", \"AGE\", \"EDUC\", \"RACE\", \"SEX\", \"KIN\")] \n```\n\n## Load Dataset for Alter-Alter Tie\n\n```{r}\nurl3 <- \"https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/gss1985_alteralter_dat.csv\"\n\nalteralter_dat <- read.csv(file = url3)\n```\n\n## Load Dataset for Alter-Alter Tie\n\n-   the ties between the named alters\n\n```{r}\n# `CASEID` : relevant ego \n# `ALTER1` : first alter in the dyad\n# `ALTER2` : second alter in the dyad\n# `Weight` : nature of the relationship (1 : alters know each other, 2: especially close)\nalteralter_dat[1:10, ]\n```\n\n## Let's make Ego Network\n\n-   transforming traditional survey data into something that has the structure of a network 🤯🤯🤯🤯🤯\n-   🍀🍀**egor**🍀🍀 package has made the task of constructing ego networks from survey data much easier\n\n```{r message=F, warning=F}\n# load a package for constructing ego network\nlibrary(egor)\n```\n\n## Let's make Ego Network\n\n-   construct an egor object from our survey data\n\n```{r message=F, warning=F}\n# `egor()` : input the data using three separate files.\n\negonetlist <-  egor(alters = alter_dat, # alter attributes data frame\n                    egos = ego_dat, # ego attributes data frame\n                    aaties = alteralter_dat, # alter-alter tie data frame\n                    alter_design = list(max = 5), # list of arguments to specify nomination information from survey\n                    # list of variable names corresponding to key columns\n                    ID.vars = list(ego = \"CASEID\", alter =\"ALTERID\", \n                                   source = \"ALTER1\", target = \"ALTER2\") \n                    ) \n```\n\n## Calculate Summary Statistics\n\n-   We will begin with density, showing the proportion of alter-alter ties that exist in each ego network\n-   By the way, What is the definition of density?🤨\n\n\n## Calculate Summary Statistics\n\n-   a measure for overall level of connection among nodes in a network \n- \\(m\\) = number of edges  \n- \\(n\\) = number of nodes  \n$$\nDentisy = \\frac{2m}{n(n-1)}\n$$\n\n```{r message=F, warning=F}\n# use `ego_density()` function\ndens <- ego_density(egonetlist)\n```\n\n## Calculate Summary Statistics\n\n```{r}\n# we calculated the density of every ego network\nhead(dens)\n```\n\n## Plotting Ego Networks\n\n-   go over how to plot the ego networks using packages like **igraph**\n\n```{r message=F, warning=F}\nlibrary(igraph)\n```\n\n## Plotting Ego Networks\n\n-   convert the **egor** object to **igraph** objects.\n\n```{r}\nigraph_nets <- as_igraph(egonetlist, include.ego = TRUE)\n```\n\n## Plotting Ego Networks\nNow, let’s take a look at the first three ego networks.\n```{r}\nigraph_nets[1:3] \n```\n\n## Plotting Ego Networks\n\nlet's plot a couple of example networks, focusing on the first 3 ego networks.\n\n```{r}\n# set 1 row, 3 column grid for visualization layout\npar(mfrow = c(1, 3))\n# draw graphs in igraph_nets variable\npurrr::walk(igraph_nets[1:3], plot)\n```\n\n## Plotting Ego Networks\n\n-   Let's color the nodes based on gender\n-   so we can get a sense of the level of gender homogeneity in these ego networks\n\n```{r}\n# somewhat more difficult task than with a single network\n# defind a function to set the color for each network\nplotfunc_colorgender <- function(nets){ \n  # Arguments: \n  # nets: ego network of interest\n  \n  # extracting the attribute from the ego network:\n  cols <- vertex_attr(nets, \"SEX\") \n\n  # now we use an ifelse statement to set color,\n  # light sky blue if gender equals female, blue otherwise:\n  cols <- ifelse(cols == \"female\", \"lightskyblue\", \"blue\")\n\n  # plotting ego network with nodes colored based on gender:\n  plot(nets, vertex.color = cols) \n}\n```\n\n## Plotting Ego Networks\n\n-   Now let’s run `plotfunc_colorgender()` over the first three ego networks.\n\n```{r}\n# third ego network is homogenous in terms of gender\n# the first two are quite heterogeneous\n# first ego network is complete\npar(mfrow = c(1, 3))\npurrr::walk(igraph_nets[1:3], plotfunc_colorgender)\n```\n\n# Triads\n\n* help us study the small-scale pattern that explain why certain people connect with each other(how ties form in a network)\n* The data are based on three relations collected on workers in a single organization\n* Our main objective is what kind of rules of interaction do we see in our friendship and advice networks\n  * i.e. do we see the same behavioral rules being followed when examining advice compared to friendship? \n\n## Triadic Processes\n* work primarily with the **sna** package [@sna], so let's start by loading that package.\n\n```{r message=F, warning=F}\nlibrary(sna)\n```\n\n## Triadic Processes\n\n* download three datasets(1. friends 2. advice 3. attributes)\n\n```{r}\nurl1 <- \"https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/krackhardt_advice.csv\"\nurl2 <- \"https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/krackhardt_attributes.csv\"\nurl3 <- \"https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/krackhardt_friendship.csv\"\n\nadvice_data_frame <- read.csv(file = url1) \nattributes <- read.csv(file = url2)\nfriends_data_frame <- read.csv(file = url3)\n\n# extract only Ture relationship\nadvice_edgelist <- advice_data_frame[advice_data_frame$advice_tie == 1, ]\nfriends_edgelist <- friends_data_frame[friends_data_frame$friendship_tie == 1, ]\n```\n\n## Triadic Processes\nLet's take a look at the dataset, one by one \n```{r}\n# ego 1 said he or she gets advice from alter 2,4,8,16,21\nhead(advice_edgelist)\n```\n## Triadic Processes\nLet's take a look at the dataset, one by one \n```{r}\n# ego 1 said he or she is friend with alter 2,4,8,12,16\nhead(friends_edgelist)\n```\n\n## Triadic Processes\nLet's take a look at the dataset, one by one \n```{r}\n# attributes for each resopondent\nhead(attributes)\n```\n\n## Triadic Processes\n* We now construct the network , as before, using the `network()` function.\n\n```{r}\nkrack_friendship <-  network(x = friends_edgelist, directed = T, \n                             vertices = attributes)\nkrack_advice <- network(x = advice_edgelist, directed = T, \n                        vertices = attributes) \n```\n\n## Triad Census\n\n* The triad census captures the distribution of triads across 16 basic types, representing different patterns of interaction between the three nodes\n* There are 16 different triad types:\n![The Sixteen types of traiads for directed networks](https://raw.githubusercontent.com/ComputationalSociologyLab/SNA_fall_2025/main/img/triad.png)\n\n## Triad Census\n\n-   compare the triad counts across the two network relations, to see if the patterns differ for friendship compared to advice\n\n```{r}\n# `triad.census()` function outputs the counts in each triad type\ntriads_advice <- triad.census(krack_advice) \ntriads_advice\n```\n\n## Triad Census\nAnd now for friendship :\n```{r}\n# `triad.census()` function outputs the counts in each triad type\ntriads_friendship <- triad.census(krack_friendship)\ntriads_friendship\n```\n\n## Triad Census\n\nLet's make a table to make the comparisons easier.\n\n```{r}\ntriad_data <- data.frame(advice = t(triads_advice), \n                         friendship = t(triads_friendship))\n```\n\n## Triad Census\n\n```{r}\ntriad_data\n```\n\n## Triad Census\n* one striking difference : The advice network has a much higher proportion of 030T triads than the friendship network\n![The Sixteen types of traiads for directed networks](https://raw.githubusercontent.com/ComputationalSociologyLab/SNA_fall_2025/main/img/030T.png)\n\n## Triad Census\n* The underlying hierarchy in this advice relation thus runs: A to C to B, as A influences B and C, C influences only B and B influences no one\n* Such a pattern of hierarchy does not emerge as clearly in the friendship network\n![The Sixteen types of traiads for directed networks](https://raw.githubusercontent.com/ComputationalSociologyLab/SNA_fall_2025/main/img/030T.png)\n\n## Triad Census\n* the triads associated with transitive dominance relations are more likely to be present in the advice network than the friendship network\n![The Sixteen types of traiads for directed networks](https://raw.githubusercontent.com/ComputationalSociologyLab/SNA_fall_2025/main/img/triad_advice.jpg)\n\n* Note that we need to be a little careful in pushing that conclusion too far, as the networks have different levels of density that may be driving the differences we observe in the triad count\n\n\n\n## Done!\n\n-   Please check KLMS for the assignment of this week\n\n-   If you want to study in-depth knowledge for the ego network, diad, and triad network, please check this week \\[Option\\]\n\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"fig-asp":null,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr","fig-align":"center"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdn.jsdelivr.net/npm/mathjax@2.7.9/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","include-in-header":{"text":"<base href=\"/SNA_fall_2025/\">\n"},"output-file":"W4_presentation.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.8.24","auto-stretch":true,"theme":"default","title":"W4. Ego Network Data","slideNumber":true,"chalkboard":true}}},"projectFormats":["revealjs"]}