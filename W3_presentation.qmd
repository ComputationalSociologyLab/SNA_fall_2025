---
title: "W3. Visualization"
format: revealjs
execute:
  echo: true
  engine: knitr
  fig-align: center
  fig-asp: null
---

# Network Visualization {#ch5-Network-Visualization-R}

-   Focus on cross-sectional network data and cover basic network visualization
-   Walk through the different approaches and options in detail

## Please keep in mind

-   We only cover a relatively small number of plotting options
-   There isnâ€™t one "*magic*" plot that is perfect for everything (mirage...unicorn...)
    -   If I could, I'd like to introduce R script that makes the perfect plot everytime
    -   A plot that works well for one network might not work for anotherðŸ¥²

## Setting up the Session

-   The actors are students in a classroom and the relation of interest is friendship

```{r}
# Load files for edge list
url1 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/class555_edgelist.csv"

class_edges <- read.csv(url1)
```

## Let's see how it looks like

```{r}
head(class_edges)
```

## Let's also read in the attribute file.

```{r}
# Attributes for gender, race and grade.
url2 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/class555_attributedata.csv"

class_attributes <- read.csv(url2)
```

## We begin using the **igraph** package.

```{r message=F, warning=F}
# import library
library(igraph)
```

## Now we go ahead and construct the igraph object

```{r}
# the edgelist and attribute objects as inputs.
# use 'graph_from_data_frame' function 
class_net <- graph_from_data_frame(d = class_edges, directed = T, 
                                   vertices = class_attributes)
```

## Detailed information of our network

```{r}
# v/c : vertex attribute, character
# v/n : vertex attribute, numeric
# e/n : edge attribute, numeric
class_net
```

## Plot a network using igraph

-   Ploting network offers an intuitive way of exploring the features of the network
-   Looking at a picture of the network is a useful starting point for an analysis.

## Let's start with the default plotting in **igraph**.

```{r fig.width = 8, fig.height  = 7.65}
plot(class_net) 
```

## And improve the graph!

-   The plot does not tell us anything (gender, race, degree..)
-   We begin by exploring gender divides in the network
-   i.e., how strongly does gender map onto friendship groups?

## And improve the graph!

-   Let's color the nodes by gender

```{r}
#  make male students navy blue and female students light sky blue 
cols <- ifelse(class_attributes$gender == "Female", "lightskyblue", "navy") 
```

## And improve the graph!

```{r}
# Using a simple `table()` function, we made simple table 
# 16 female students are assigned for lightskyblue color
# 8 male students are assigned for navy color
table(cols, class_attributes$gender)
```

## Assign the gendered colorset to the network

```{r}
# use a `V(g)$color` command to set the color of each node in the network 
V(class_net)$color <- cols 
```

## And now we plot as before.

```{r fig.width = 8, fig.height  = 7.65}
# same result for `plot(class_net, vertex.color = cols)`
plot(class_net)
```

## What is different?

-   The network does divide along gender lines
-   With one small group of boys and then a larger set of girls
-   Two boys are not part of the 'boy group', and are disproportionately connected to girls
-   What else?

## What if?

-   A researcher may also be interested in who is popular in the class
-   We can identify it with Network Measure

## What if?

-   A researcher may also be interested in who is popular in the class
-   We can identify it with Network Measure

```{r}
# Yes! indegree!
# degree : # of of neighbors in a network
# indegree : # of incoming neighbors
# indegree of node i : # of students who think node i is their frieds 
# -> popularity
indeg <- degree(class_net, mode = "in")
```

## Now we plot the network

-   Put indegree value for the size of the nodes

```{r fig.width = 8, fig.height  = 7.65}
# set margin to -.10 to reduce some of the extra white space around the plot.
plot(class_net, vertex.size = indeg, margin = -.10)
```

## Now we plot the network

-   Make all the nodes a little bigger, but the nodes are still sized by indegree

```{r fig.width = 8, fig.height  = 7.65}
# adding integer (here, 3) to the indegree to make the node bigger
# change the color of label
plot(class_net, vertex.size = indeg + 3, vertex.label.color = "red", 
     margin = -.10)
```

## Now we plot the network

-   One boy (id 13) and one girl (id 24) receive a particularly high number of nominations
-   Boys in the 'boy group' tend to have low indegree, as they are only friends with each other and there are few boys in the network.

## Let's improve the graph!

-   Change the look of the nodes

```{r fig.width = 6, fig.height  = 5.65}
plot(class_net, 
    vertex.size = indeg + 3, 
    vertex.label = NA, # take out those labels using a vertex.label argument
    vertex.frame.color = NA, # take off the black edges around the nodes
    edge.arrow.size = .5, 
    edge.arrow.width = .75, 
    margin = -.10)
```

## Let's improve the graph!

-   Now we change the layout of the graph.
-   layout_with_mds(Multi-Dimensional Scaling)
    -   calculate the distance between node i and j
    -   place nodes where the distance is preserved
    -   ðŸ‘‰ Good for showing the overall/global structure of the network

## Let's improve the graph!

-   layout_with_kk(Kamadaâ€“Kawai)
    -   Assign the distnace between node i and j
        -   if direct edge exists, place the nodes closer together
        -   if not, place the nodes farther apart
        -   ðŸ‘‰ Good for highlighting local structures and communities

## Let's improve the graph!

-   Now we change layout of a network.

```{r fig.width = 6, fig.height  = 5.65}
plot(class_net, 
     vertex.size = indeg + 3, 
     vertex.label = NA, 
     vertex.frame.color = NA, 
     edge.arrow.size = .5, 
     edge.arrow.width = .75, 
     edge.color = "light gray", # change the color of the lines to light gray,
     layout = layout_with_mds, # alter the layout of the plot 
     margin = -.10)
```

## Let's improve the graph!

-   Now we change layout of a network.

```{r fig.width = 8, fig.height  = 7.65}
plot(class_net, 
     vertex.size = indeg + 3, 
     vertex.label = NA, 
     vertex.frame.color = NA, 
     edge.arrow.size = .5, 
     edge.arrow.width = .75, 
     edge.color = "light gray", # change the color of the lines to light gray,
     layout = layout_with_kk, # alter the layout of the plot 
     margin = -.10)
```

## Let's improve the graph!

-   a number of other options a researcher could explore if they wanted to continue tweaking their plot.
-   See the following help files for more options: `?plot.igraph` `?igraph.plotting`

```{r}
?plot.igraph
```

## Done!

-   Please check KLMS for the assignment of this week

-   This week \[Option\] is a real fun

    -   you can excercise how to draw dynamic graph!

-   Questions?
