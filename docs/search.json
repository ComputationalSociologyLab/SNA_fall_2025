[
  {
    "objectID": "W5_presentation.html#load-dataset",
    "href": "W5_presentation.html#load-dataset",
    "title": "W5. Network Cohesion and Communities",
    "section": "Load dataset",
    "text": "Load dataset\n\nuse primarily with the igraph package. We will also load ggplot2 to draw a network.\n\n\nlibrary(igraph)\nlibrary(ggplot2)"
  },
  {
    "objectID": "W5_presentation.html#load-dataset-1",
    "href": "W5_presentation.html#load-dataset-1",
    "title": "W5. Network Cohesion and Communities",
    "section": "Load dataset",
    "text": "Load dataset\n\nread in the classroom network data (edgelist dataset)\n\n\nurl1 &lt;- \"https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/class182_networkdata.csv\"\nclass182_networkdata &lt;- read.csv(file = url1)\n# contains information for three relationship : friendship, social interaction, task interaction \n# 2 = best friend, 1 = friend, 0 = not friend\n# Social/task interaction is measured as each interaction per hour\nhead(class182_networkdata) \n\n  ego alter friend_tie social_tie task_tie\n1   1     1          0        0.0      0.0\n2   1     2          0        0.0      0.0\n3   1     3          0        0.0      0.0\n4   1     4          0        0.0      0.0\n5   1     5          0        1.2      0.3\n6   1     6          0        0.0      0.0"
  },
  {
    "objectID": "W5_presentation.html#load-dataset-2",
    "href": "W5_presentation.html#load-dataset-2",
    "title": "W5. Network Cohesion and Communities",
    "section": "Load dataset",
    "text": "Load dataset\n\nread in the classroom network data (attribute dataset)\n\n\nurl2 &lt;- \"https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/class182_attributedata.csv\"\nclass182_attributes &lt;- read.csv(file = url2)\nclass182_attributes\n\n   ids  race grade gender\n1    1 white    10   male\n2    2 black    10 female\n3    3 white    10 female\n4    4 white    11 female\n5    5 white    10   male\n6    6 white    10 female\n7    7 black    10 female\n8    8 black    10 female\n9    9 white    10 female\n10  10 black    11   male\n11  11 white    10   male\n12  12 black    11 female\n13  13 white    10 female\n14  14 black    10 female\n15  15 black    10 female\n16  16 black    13   male"
  },
  {
    "objectID": "W5_presentation.html#create-frienship-network",
    "href": "W5_presentation.html#create-frienship-network",
    "title": "W5. Network Cohesion and Communities",
    "section": "Create Frienship Network",
    "text": "Create Frienship Network\n\nExtract the friends within the dataset\n\n\n# edges with a friendship value greater than zero\nedge_value &lt;- class182_networkdata$friend_tie\nedgelist_friendship &lt;- class182_networkdata[edge_value &gt; 0, \n                                            c(\"ego\", \"alter\", \"friend_tie\")]\nhead(edgelist_friendship)\n\n   ego alter friend_tie\n17   2     1          1\n23   2     7          1\n24   2     8          1\n29   2    13          2\n30   2    14          1\n37   3     5          1"
  },
  {
    "objectID": "W5_presentation.html#create-frienship-network-1",
    "href": "W5_presentation.html#create-frienship-network-1",
    "title": "W5. Network Cohesion and Communities",
    "section": "Create Frienship Network",
    "text": "Create Frienship Network\n\nCreate a igraph object using the edgelist and attribute data frames.\n\n\n# directed network\n# have the strength of the relationship\nnet182_friend &lt;- graph_from_data_frame(d = edgelist_friendship, directed = T, \n                                       vertices = class182_attributes) \nnet182_friend \n\nIGRAPH 59ecd65 DN-- 16 62 -- \n+ attr: name (v/c), race (v/c), grade (v/n), gender (v/c), friend_tie\n| (e/n)\n+ edges from 59ecd65 (vertex names):\n [1] 2 -&gt;1  2 -&gt;7  2 -&gt;8  2 -&gt;13 2 -&gt;14 3 -&gt;5  3 -&gt;6  3 -&gt;11 3 -&gt;14 3 -&gt;15\n[11] 5 -&gt;1  5 -&gt;3  5 -&gt;6  5 -&gt;8  5 -&gt;10 5 -&gt;11 6 -&gt;1  6 -&gt;3  6 -&gt;5  6 -&gt;7 \n[21] 6 -&gt;10 6 -&gt;11 6 -&gt;12 7 -&gt;2  7 -&gt;8  7 -&gt;13 7 -&gt;14 8 -&gt;2  8 -&gt;5  8 -&gt;7 \n[31] 8 -&gt;13 8 -&gt;14 8 -&gt;15 9 -&gt;1  9 -&gt;3  9 -&gt;10 9 -&gt;12 9 -&gt;15 10-&gt;1  10-&gt;9 \n[41] 10-&gt;12 10-&gt;15 11-&gt;1  11-&gt;3  11-&gt;5  11-&gt;6  11-&gt;10 12-&gt;1  12-&gt;9  12-&gt;15\n[51] 13-&gt;2  13-&gt;7  13-&gt;8  13-&gt;14 14-&gt;2  14-&gt;3  14-&gt;8  14-&gt;12 15-&gt;1  15-&gt;7 \n[61] 15-&gt;9  15-&gt;12"
  },
  {
    "objectID": "W5_presentation.html#lets-see-if-cohesion-exists",
    "href": "W5_presentation.html#lets-see-if-cohesion-exists",
    "title": "W5. Network Cohesion and Communities",
    "section": "Let’s see if cohesion exists",
    "text": "Let’s see if cohesion exists\n\nStart with a quick plot of the friendship network\nIs there any cohision in this network??\n\n\nplot(net182_friend, vertex.label = NA, vertex.size = 10,\n     edge.arrow.size = .25, edge.arrow.width = 1, \n     edge.color = \"light gray\", vertex.frame.color = NA)"
  },
  {
    "objectID": "W5_presentation.html#lets-see-if-cohesion-exists-1",
    "href": "W5_presentation.html#lets-see-if-cohesion-exists-1",
    "title": "W5. Network Cohesion and Communities",
    "section": "Let’s see if cohesion exists",
    "text": "Let’s see if cohesion exists\n\nThe classroom network is fairly cohesive (ignoring the two isolates)\nHard to split the central group into two groups."
  },
  {
    "objectID": "W5_presentation.html#lets-see-if-cohesion-exists-2",
    "href": "W5_presentation.html#lets-see-if-cohesion-exists-2",
    "title": "W5. Network Cohesion and Communities",
    "section": "Let’s see if cohesion exists",
    "text": "Let’s see if cohesion exists\n\nexplore some of the properties of the network, starting with density.\n\nWhat does it mean?\n\n\nedge_density(net182_friend)\n\n[1] 0.2583333"
  },
  {
    "objectID": "W5_presentation.html#lets-see-if-cohesion-exists-3",
    "href": "W5_presentation.html#lets-see-if-cohesion-exists-3",
    "title": "W5. Network Cohesion and Communities",
    "section": "Let’s see if cohesion exists",
    "text": "Let’s see if cohesion exists\n\nAbout a quarter of all possible ties are present in the network\n(m) = number of edges = 62\n(n) = number of nodes = 16\n\nGive us the information on the volume of ties, not the pattern of ties \\[\nDentisy = \\frac{m}{n(n-1)} = \\frac{62}{16*(16-1)} = 0.2583 ≈ 25.8%\n\\]"
  },
  {
    "objectID": "W5_presentation.html#lets-see-if-cohesion-exists-4",
    "href": "W5_presentation.html#lets-see-if-cohesion-exists-4",
    "title": "W5. Network Cohesion and Communities",
    "section": "Let’s see if cohesion exists",
    "text": "Let’s see if cohesion exists\n\ncomponents() : Detect all connected components in the network\n\n“strong” mode : find components where node i and j are mutual reachable\n“weak” mode : find components where node i and j are in the same group if there is any path connecting them\n\n\n\n# *Note* : mode argument is ignored in the case of undirected networks.  \ncomponents_friendship &lt;- components(graph = net182_friend, mode = \"weak\")"
  },
  {
    "objectID": "W5_presentation.html#lets-see-if-cohesion-exists-5",
    "href": "W5_presentation.html#lets-see-if-cohesion-exists-5",
    "title": "W5. Network Cohesion and Communities",
    "section": "Let’s see if cohesion exists",
    "text": "Let’s see if cohesion exists\n\n# membership : component membership of each node\n# csize : size of component\n# no : component number\ncomponents_friendship\n\n$membership\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 \n 1  1  1  2  1  1  1  1  1  1  1  1  1  1  1  3 \n\n$csize\n[1] 14  1  1\n\n$no\n[1] 3"
  },
  {
    "objectID": "W5_presentation.html#lets-see-if-cohesion-exists-6",
    "href": "W5_presentation.html#lets-see-if-cohesion-exists-6",
    "title": "W5. Network Cohesion and Communities",
    "section": "Let’s see if cohesion exists",
    "text": "Let’s see if cohesion exists\n\nLet’s calculate the proportion of nodes in each component.\n\n\n# 87.5% of the nodes fall in the largest component\n# two isolates are each in their own component\ncomponents_friendship$csize / sum(components_friendship$csize) \n\n[1] 0.8750 0.0625 0.0625"
  },
  {
    "objectID": "W5_presentation.html#lets-see-if-cohesion-exists-7",
    "href": "W5_presentation.html#lets-see-if-cohesion-exists-7",
    "title": "W5. Network Cohesion and Communities",
    "section": "Let’s see if cohesion exists",
    "text": "Let’s see if cohesion exists\n\nExplore the connectivity of specific pairs of nodes in the network(vertex connectivity)\nThe output is the number of nodes that would need to be removed so that i can no longer reach j"
  },
  {
    "objectID": "W5_presentation.html#lets-see-if-cohesion-exists-8",
    "href": "W5_presentation.html#lets-see-if-cohesion-exists-8",
    "title": "W5. Network Cohesion and Communities",
    "section": "Let’s see if cohesion exists",
    "text": "Let’s see if cohesion exists\n\nUtilize the vertex connectivity with undirected network\n\n\nnet182_friend_und &lt;- as_undirected(net182_friend, mode = \"collapse\") \nnet182_friend_und\n\nIGRAPH 04161ed UN-- 16 42 -- \n+ attr: name (v/c), race (v/c), grade (v/n), gender (v/c)\n+ edges from 04161ed (vertex names):\n [1] 1 --2  1 --5  3 --5  1 --6  3 --6  5 --6  2 --7  6 --7  2 --8  5 --8 \n[11] 7 --8  1 --9  3 --9  1 --10 5 --10 6 --10 9 --10 1 --11 3 --11 5 --11\n[21] 6 --11 10--11 1 --12 6 --12 9 --12 10--12 2 --13 7 --13 8 --13 2 --14\n[31] 3 --14 7 --14 8 --14 12--14 13--14 1 --15 3 --15 7 --15 8 --15 9 --15\n[41] 10--15 12--15"
  },
  {
    "objectID": "W5_presentation.html#lets-see-if-cohesion-exists-9",
    "href": "W5_presentation.html#lets-see-if-cohesion-exists-9",
    "title": "W5. Network Cohesion and Communities",
    "section": "Let’s see if cohesion exists",
    "text": "Let’s see if cohesion exists\n\ncalculate vertex connectivity for two example nodes, 1 and 9:\n\n\n# get the connectivity for the entire network\n# need to remove 5 other nodes -&gt; highly interconnected, likely part of the same social group \n# `vertex_connectivity()` return minimum number of nodes that would need to be removed to disconnect the network \nvertex_disjoint_paths(graph = net182_friend_und, source = 1, target = 9)\n\n[1] 5"
  },
  {
    "objectID": "W5_presentation.html#community-or-group-detection",
    "href": "W5_presentation.html#community-or-group-detection",
    "title": "W5. Network Cohesion and Communities",
    "section": "Community (or Group) Detection",
    "text": "Community (or Group) Detection\n\nFind the communities (or groups) within the larger cohesive set.\nThe goal is to identify sets of nodes that have high internal density and few ties to outside members."
  },
  {
    "objectID": "W5_presentation.html#community-or-group-detection-1",
    "href": "W5_presentation.html#community-or-group-detection-1",
    "title": "W5. Network Cohesion and Communities",
    "section": "Community (or Group) Detection",
    "text": "Community (or Group) Detection\n\nSolve the questions below by utilizing community detection\n\nDoes race map strongly onto the found communities?\nHow do the communities contribute or detract from the overall cohesion of the network?"
  },
  {
    "objectID": "W5_presentation.html#community-or-group-detection-2",
    "href": "W5_presentation.html#community-or-group-detection-2",
    "title": "W5. Network Cohesion and Communities",
    "section": "Community (or Group) Detection",
    "text": "Community (or Group) Detection\n\nMany different ways to detect communities.\n\nCohesive Blocking, 2) Walktrap, 3) [OPTION] Edge Betweenness 4) [OPTION] Multi-level Clustering"
  },
  {
    "objectID": "W5_presentation.html#cohesive-blocking",
    "href": "W5_presentation.html#cohesive-blocking",
    "title": "W5. Network Cohesion and Communities",
    "section": "1) Cohesive Blocking",
    "text": "1) Cohesive Blocking\n\nSubset the network into groups based on vertex connectivity\nIteratively search for subgroups that maintain connectivity under the removal of k nodes\nStarting from highly cohesive groups (large k) and moving down to less cohesive ones"
  },
  {
    "objectID": "W5_presentation.html#cohesive-blocking-1",
    "href": "W5_presentation.html#cohesive-blocking-1",
    "title": "W5. Network Cohesion and Communities",
    "section": "1) Cohesive Blocking",
    "text": "1) Cohesive Blocking\n\nfriend_comm_cohesive &lt;- cohesive_blocks(graph = net182_friend_und)\nfriend_comm_cohesive #hard to interprete the result..... then...?\n\nCohesive block structure:\nB-1      c 0, n 16\n'- B-2   c 4, n 14   ooo.oooooo ooooo."
  },
  {
    "objectID": "W5_presentation.html#cohesive-blocking-2",
    "href": "W5_presentation.html#cohesive-blocking-2",
    "title": "W5. Network Cohesion and Communities",
    "section": "1) Cohesive Blocking",
    "text": "1) Cohesive Blocking\n\nVisualize the result!!\nTwo blocks (one with vertex connectivity 0, second with vertex connectivity)\n\n\nplot(friend_comm_cohesive, net182_friend_und)"
  },
  {
    "objectID": "W5_presentation.html#walktrap",
    "href": "W5_presentation.html#walktrap",
    "title": "W5. Network Cohesion and Communities",
    "section": "2) Walktrap",
    "text": "2) Walktrap\n\nDetects communities through a series of short random walks\n\nThe algorithm initially treats all nodes as communities of their own\nthen merges them into larger communities, and these into still larger communities, and so on.\n\n\n\n# steps :number of steps in random walk\n# membership : T/F, should membership be calculated based on highest modularity score? T by default\nfriend_comm_wt4 &lt;- cluster_walktrap(graph = net182_friend_und, steps = 4, \n                                    membership = T)"
  },
  {
    "objectID": "W5_presentation.html#walktrap-1",
    "href": "W5_presentation.html#walktrap-1",
    "title": "W5. Network Cohesion and Communities",
    "section": "2) Walktrap",
    "text": "2) Walktrap\n\nfriend_comm_wt4\n\nIGRAPH clustering walktrap, groups: 4, mod: 0.27\n+ groups:\n  $`1`\n  [1] \"2\"  \"7\"  \"8\"  \"13\" \"14\"\n  \n  $`2`\n  [1] \"1\"  \"3\"  \"5\"  \"6\"  \"9\"  \"10\" \"11\" \"12\" \"15\"\n  \n  $`3`\n  [1] \"4\"\n  \n  $`4`\n  + ... omitted several groups/vertices"
  },
  {
    "objectID": "W5_presentation.html#walktrap-2",
    "href": "W5_presentation.html#walktrap-2",
    "title": "W5. Network Cohesion and Communities",
    "section": "2) Walktrap",
    "text": "2) Walktrap\nNow let’s get the membership of each node as well the modularity score based on 4 our step solution.\n\nmems_wt_4step &lt;- membership(friend_comm_wt4)\nmems_wt_4step\n\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 \n 2  1  2  3  2  2  1  1  2  2  2  2  1  1  2  4 \n\n\n\nmod_wt_4step &lt;- modularity(friend_comm_wt4)\nmod_wt_4step\n\n[1] 0.2695578"
  },
  {
    "objectID": "W5_presentation.html#walktrap-3",
    "href": "W5_presentation.html#walktrap-3",
    "title": "W5. Network Cohesion and Communities",
    "section": "2) Walktrap",
    "text": "2) Walktrap\nWhat would happen if we used 3 steps?\n\nfriend_comm_wt3 &lt;- cluster_walktrap(graph = net182_friend_und, \n                                    steps = 3, membership = T)\nmems_wt_3step &lt;- membership(friend_comm_wt3)\nmems_wt_3step\n\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 \n 2  1  3  4  3  3  1  1  2  2  3  2  1  1  2  5"
  },
  {
    "objectID": "W5_presentation.html#walktrap-4",
    "href": "W5_presentation.html#walktrap-4",
    "title": "W5. Network Cohesion and Communities",
    "section": "2) Walktrap",
    "text": "2) Walktrap\n\nmod_wt_3step &lt;- modularity(friend_comm_wt3)\nmod_wt_3step\n\n[1] 0.2797619"
  },
  {
    "objectID": "W5_presentation.html#walktrap-5",
    "href": "W5_presentation.html#walktrap-5",
    "title": "W5. Network Cohesion and Communities",
    "section": "2) Walktrap",
    "text": "2) Walktrap\nWe can see that the modularity is slightly higher when we use 3 steps. We can compare the two partitions using the table function:\n\ntable(mems_wt_4step, mems_wt_3step)\n\n             mems_wt_3step\nmems_wt_4step 1 2 3 4 5\n            1 5 0 0 0 0\n            2 0 5 4 0 0\n            3 0 0 0 1 0\n            4 0 0 0 0 1"
  },
  {
    "objectID": "W5_presentation.html#walktrap-6",
    "href": "W5_presentation.html#walktrap-6",
    "title": "W5. Network Cohesion and Communities",
    "section": "2) Walktrap",
    "text": "2) Walktrap\n\nLet’s also plot the network based on the found communities, comparing the two partitions.\nColor the nodes based on the communities found using the walktrap algorithm.\n\n\npar(mfrow = c(1, 2))\nlayout &lt;- layout.fruchterman.reingold(net182_friend) \n\nplot(net182_friend_und, layout = layout, #note the use of layout\n     vertex.color = mems_wt_4step, edge.color = \"light gray\", \n     vertex.size = 20, main = \"Walktrap: 4 Steps\")\n\nplot(net182_friend_und, layout = layout, #note the use of layout\n     vertex.color = mems_wt_3step, edge.color = \"light gray\", \n     vertex.size = 20, main = \"Walktrap: 3 Steps\")"
  },
  {
    "objectID": "W5_presentation.html#walktrap-7",
    "href": "W5_presentation.html#walktrap-7",
    "title": "W5. Network Cohesion and Communities",
    "section": "2) Walktrap",
    "text": "2) Walktrap\n\n2 basic communities (2, 7, 8, 13, 14 and 1, 3, 5, 6, 9, 10, 11, 12, 15)\none of those communities having their own internal division.\nLarger community is split in two: (3, 5, 6, 11) and (1, 9, 10, 12, 15)"
  },
  {
    "objectID": "W5_presentation.html#done",
    "href": "W5_presentation.html#done",
    "title": "W5. Network Cohesion and Communities",
    "section": "Done!",
    "text": "Done!\n\nPlease check KLMS for the assignment of this week(til Friday)\nIf you want to study in-depth knowledge for algorithms for community detectionthe ego network, dyad, and triad network, please check this week [Option] in the assignment"
  }
]