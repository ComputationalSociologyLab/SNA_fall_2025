print(friend_comm_wt4, all = TRUE)
# the modularity is slightly higher when we use 3 steps
friend_comm_wt3 <- cluster_walktrap(graph = net182_friend_und,
steps = 3, membership = T)
friend_comm_wt3
# row : results for communities when step is 4 (4 community detected)
# col : results for communities when step is 3 (5 community detected)
table( membership(friend_comm_wt4),  membership(friend_comm_wt3))
par(mfrow = c(1, 2))
layout <- layout_with_fr(net182_friend)
plot(net182_friend_und, layout = layout, #note the use of layout
vertex.color =  membership(friend_comm_wt4), edge.color = "light gray",
vertex.size = 20, main = "Walktrap: 4 Steps")
plot(net182_friend_und, layout = layout, #note the use of layout
vertex.color =  membership(friend_comm_wt3), edge.color = "light gray",
vertex.size = 20, main = "Walktrap: 3 Steps")
library(igraph)
url1 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/social_interactions_s641.csv"
social_data <- read.csv(file = url1)
edgelist_social <- social_data[social_data$social_tie > 0, ]
head(social_data)
# The size of the network is 22, so we will set the vertices input to define the ids of the nodes exclude isolated nodes
s641_social <- graph_from_data_frame(d = edgelist_social, directed = T,
vertices = (id = 1:22))
net641_social_noisolates <- graph_from_data_frame(d = edgelist_social,
directed = T)
url2 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/task_interactions_s641.csv"
task_data <- read.csv(file = url2)
head(task_data)
edgelist_task <- task_data[task_data$task_tie > 0, ]
edgelist_task <- edgelist_task[edgelist_task$ego < edgelist_task$alter, ]
s641_task <- graph_from_data_frame(d = edgelist_task, directed = F,
vertices = (id = 1:22))
par(mfrow = c(1, 2))
plot(s641_social, vertex.frame.color = NA, edge.arrow.size = .25,
vertex.size = 8, main = "Social Interactions", margin = -.08)
plot(s641_task, vertex.frame.color = NA, edge.arrow.size = .25,
vertex.size = 8, main = "Task Interactions", margin = -.08)
indegree_social <- degree(graph = s641_social, mode = "in")
head(indegree_social)
outdegree_social <- degree(graph = s641_social, mode = "out")
head(outdegree_social)
outcloseness_social <- closeness(graph = s641_social, mode = "out",
normalized = T)
head(outcloseness_social)
incloseness_social <- closeness(graph = s641_social, mode = "in",
normalized = T)
head(incloseness_social)
dist_mat_social <- distances(graph = s641_social, mode = "out")
diag(dist_mat_social) <- NA #ignoring the diagonal
dist_mat_social_inverted <- 1 / dist_mat_social #inverting distance matrix
outcloseness_social2 <- apply(dist_mat_social_inverted, MARGIN = 1,
FUN = mean, na.rm = T)
head(outcloseness_social2)
cor(outcloseness_social, outcloseness_social2, use = "complete.obs")
cor(outcloseness_social[-c(4, 8, 11, 15)],
outcloseness_social2[-c(4, 8, 11, 15)],
use = "complete.obs")
incloseness_social2 <- apply(dist_mat_social_inverted, MARGIN = 2,
FUN = mean, na.rm = T)
head(incloseness_social2)
betweenness_social <- betweenness(graph = s641_social, normalized = F)
head(betweenness_social)
s641_social_undirected <- as.undirected(s641_social, mode = "collapse")
ev_obj_social <- eigen_centrality(s641_social_undirected)
eigen_social <- ev_obj_social$vector
head(eigen_social)
ids <- V(s641_social)$name
central_social <- data.frame(ids = ids, net = "social",
indegree = indegree_social,
outdegree = outdegree_social,
incloseness2 = incloseness_social2,
outcloseness2 = outcloseness_social2,
between = betweenness_social,
eigen = eigen_social)
head(central_social)
apply(central_social[, -c(1, 2)], MARGIN = 2, FUN = order, decreasing = T)
library(reshape)
vars_to_stack <-c("ids", "indegree", "incloseness2", "between", "eigen")
social_long <- melt(central_social[, vars_to_stack], id.vars = "ids")
head(social_long)
library(ggplot2)
ggplot(social_long, aes(x = factor(ids, levels = 1:length(ids)), y = value)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ variable, scales = "free_y", ncol = 2) +
xlab("Ids") + ylab("Centrality") +
theme(axis.text = element_text(size = 6.5))
plot(s641_social, vertex.size = central_social$between / 5,
vertex.label = V(s641_social)$name,
edge.arrow.size = 0.25, layout = layout.fruchterman.reingold,
main = "Classroom S641 Social Talk", margin = -.08)
cor_tab1 <- cor(central_social[, -c(1, 2)])
round(cor_tab1, 3)
degree_task <- degree(s641_task)
dist_mat_task <- distances(graph = s641_task)
diag(dist_mat_task) <- NA
dist_mat_task_inverted <- 1 / dist_mat_task
closeness_task2 <- apply(dist_mat_task_inverted, MARGIN = 1,
FUN = mean, na.rm = T)
betweenness_task <- betweenness(s641_task, normalized = F)
ev_obj_task <- evcent(s641_task)
eigen_task <- ev_obj_task$vector
central_task <- data.frame(ids = ids, net = "task",
degree = degree_task,
closeness2 = closeness_task2,
between = betweenness_task,
eigen = eigen_task)
head(central_task)
apply(central_task[, -c(1, 2)], MARGIN = 2, FUN = order, decreasing = T)
plot(s641_task, vertex.size = central_task$degree,
vertex.label = V(s641_social)$name,
edge.arrow.size = 0.25, layout = layout.fruchterman.reingold,
main = "Classroom S641 Task Interactions", margin = -.08)
vars_to_stack_task <- c("ids", "degree", "closeness2", "between", "eigen")
task_long <- melt(central_task[, vars_to_stack_task], id.vars = "ids")
head(task_long)
task_long$net <- "task"
social_long$net <- "social"
social_task_long <- rbind(social_long, task_long)
library(car)
social_task_long$variable <- recode(social_task_long$variable, as.factor = T,
"'incloseness2' = 'closeness2';
'indegree' = 'degree'",
levels = c("degree", "closeness2",
"between", "eigen"))
ggplot(social_task_long, aes(x = factor(ids, levels = 1:length(ids)),
y = value, fill = net)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ variable, scales = "free_y", ncol = 2)+
scale_fill_discrete(name = "Network",
breaks = c("social", "task"),
labels = c("Social", "Task")) +
xlab("Ids") + ylab("Centrality") +
theme(axis.text = element_text(size = 6.5))
cor_tab2 <- cor(central_social[, -c(1, 2)], central_task[, -c(1, 2)])
rownames(cor_tab2) <- paste(rownames(cor_tab2), "social", sep = "_")
colnames(cor_tab2) <- paste(colnames(cor_tab2), "task", sep = "_")
round(cor_tab2[, c("eigen_task", "degree_task", "closeness2_task")], 3)
summary(indegree_social)
summary(degree_task)
sd(indegree_social)
sd(degree_task)
cent_social <- centr_degree(graph = s641_social, mode = "in",
loops = FALSE, normalized = TRUE)
cent_social
sum(max(indegree_social) - indegree_social) / sum(21 - rep(0, 21))
cent_task <- centr_degree(graph = s641_task,
loops = FALSE, normalized = TRUE)
cent_task
den_social <- density(indegree_social, from = 0)
den_task <- density(degree_task, from = 0)
plot(range(den_social$x, den_task$x), range(den_social$y, den_task$y),
type = "n", xlab = "degree",
ylab = "density",
main = "Degree Distribution for Social and Task Networks")
lines(den_social, col = "red" , lty = 2, lwd = 2)
lines(den_task, col = "light blue", lty = 2, lwd = 2)
legend("topright", c("Social", "Task"),
col = c("red", "light blue"), lty = 2, lwd = 2)
library(intergraph)
s641_social_network <- asNetwork(s641_social)
source(file = "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/R/tau_functions.R")
library(ergm)
library(sna)
weights_rankedcluster <- c(1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1)
weights_cluster <- c(1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)
weights_balance <- c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)
tau_rankedcluster <- tau_stat_function(network = s641_social_network,
weight.vector = weights_rankedcluster)
tau_rankedcluster
tau_cluster <- tau_stat_function(network = s641_social_network,
weight.vector = weights_cluster)
tau_cluster
tau_balance <- tau_stat_function(network = s641_social_network,
weight.vector = weights_balance)
tau_balance
triad_names <- c("triadcensus.021D", "triadcensus.021U", "triadcensus.030T",
"triadcensus.120D","triadcensus.120U")
tau_rankedcluster[[2]][rownames(tau_rankedcluster[[2]]) %in% triad_names, ]
library(igraph)
url1 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/social_interactions_s641.csv"
social_data <- read.csv(file = url1)
edgelist_social <- social_data[social_data$social_tie > 0, ]
head(social_data)
# The size of the network is 22, so we will set the vertices input to define the ids of the nodes exclude isolated nodes
s641_social <- graph_from_data_frame(d = edgelist_social, directed = T,
vertices = (id = 1:22))
url2 <- "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/data/task_interactions_s641.csv"
task_data <- read.csv(file = url2)
head(task_data)
edgelist_task <- task_data[task_data$task_tie > 0, ]
# delete duplicated edges (2-5/5-2)
edgelist_task <- edgelist_task[edgelist_task$ego < edgelist_task$alter, ]
s641_task <- graph_from_data_frame(d = edgelist_task, directed = F, vertices = (id = 1:22))
par(mfrow = c(1, 2))
plot(s641_social, vertex.frame.color = NA, edge.arrow.size = .25, vertex.size = 8, main = "Social Interactions", margin = -.08)
plot(s641_task, vertex.frame.color = NA, edge.arrow.size = .25, vertex.size = 8, main = "Task Interactions", margin = -.08)
indegree_social <- degree(graph = s641_social, mode = "in")
head(indegree_social)
outdegree_social <- degree(graph = s641_social, mode = "out")
head(outdegree_social)
# mode = "in", or "out"
# normalized = T/F, should scores be normalized? (divided by n-1, where n is the number of people in the network)
outcloseness_social <- closeness(graph = s641_social, mode = "out",
normalized = T)
head(outcloseness_social)
incloseness_social <- closeness(graph = s641_social, mode = "in",
normalized = T)
head(incloseness_social)
degree_task <- degree(s641_task)
summary(indegree_social)
summary(degree_task)
sd(indegree_social)
sd(degree_task)
cent_social <- centr_degree(graph = s641_social, mode = "in",
loops = FALSE, normalized = TRUE)
cent_social
sum(max(indegree_social) - indegree_social) / sum(21 - rep(0, 21))
cent_task <- centr_degree(graph = s641_task,
loops = FALSE, normalized = TRUE)
cent_task
den_social <- density(indegree_social, from = 0)
den_task <- density(degree_task, from = 0)
plot(range(den_social$x, den_task$x), range(den_social$y, den_task$y),
type = "n", xlab = "degree",
ylab = "density",
main = "Degree Distribution for Social and Task Networks")
lines(den_social, col = "red" , lty = 2, lwd = 2)
lines(den_task, col = "light blue", lty = 2, lwd = 2)
legend("topright", c("Social", "Task"),
col = c("red", "light blue"), lty = 2, lwd = 2)
library(intergraph)
s641_social_network <- asNetwork(s641_social)
source(file = "https://github.com/JeffreyAlanSmith/Integrated_Network_Science/raw/master/R/tau_functions.R")
library(ergm)
library(sna)
weights_rankedcluster <- c(1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1)
weights_cluster <- c(1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)
weights_balance <- c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)
tau_rankedcluster <- tau_stat_function(network = s641_social_network,
weight.vector = weights_rankedcluster)
tau_rankedcluster
tau_cluster <- tau_stat_function(network = s641_social_network,
weight.vector = weights_cluster)
tau_cluster
tau_balance <- tau_stat_function(network = s641_social_network,
weight.vector = weights_balance)
tau_balance
triad_names <- c("triadcensus.021D", "triadcensus.021U", "triadcensus.030T",
"triadcensus.120D","triadcensus.120U")
tau_rankedcluster[[2]][rownames(tau_rankedcluster[[2]]) %in% triad_names, ]
library(igraph)
library(igraph)
library(igraph)
library(igraph)
url1 <- "https://github.com/ComputationalSociologyLab/SNA_fall_2025/raw/master/data/Kadusin_1995_edge_list.csv"
edge_list <- read.csv(file = url1)
url1 <- "https://github.com/ComputationalSociologyLab/SNA_fall_2025/raw/data/Kadusin_1995_edge_list.csv"
edge_list <- read.csv(file = url1)
url1 <- "https://github.com/ComputationalSociologyLab/SNA_fall_2025/raw/main/data/Kadusin_1995_edge_list.csv"
edge_list <- read.csv(file = url1)
head(edge_list)
url1 <- "https://github.com/ComputationalSociologyLab/SNA_fall_2025/raw/main/data/Kadusin_1995_node_list.csv"
node_list <- read.csv(file = url1)
head(edge_list)
head(node_list)
sociogram <- graph_from_data_frame(d = edge_list, directed = F,
vertices = node_list)
sociogram
sociogram <- graph_from_data_frame(d = edge_list, directed = F,
vertices = node_list)
sociogram
plot(sociogram)
plot(sociogram, vertex.size = 10)
plot(sociogram, vertex.size = 20)
plot(sociogram, vertex.size = 30)
plot(sociogram, vertex.size = 30,  layout = layout_with_mds)
plot(sociogram, vertex.size = 30,  layout = layout_with_kk)
plot(sociogram, vertex.size = 30,  layout = layout_with_mds)
plot(sociogram, vertex.size = 20,  layout = layout_with_mds)
plot(sociogram, vertex.size = 20,  vertex.label.cex = 0.45, layout = layout_with_mds)
coords <- layout_with_mds(sociogram)
coords <- jitter(coords, amount = 0.05)
plot(
sociogram,
layout = coords,
vertex.size = 30,
vertex.label.cex = 0.9,
vertex.label.color = "black"
)
coords <- layout_with_mds(sociogram)
coords <- jitter(coords, amount = 0.15)
plot(
sociogram,
layout = coords,
vertex.size = 20,
vertex.label.cex = 0.7,
vertex.label.color = "black"
)
coords <- layout_with_mds(sociogram)
coords_scaled <- coords * 3
plot(
sociogram,
layout = coords,
vertex.size = 20,
vertex.label.cex = 0.7,
vertex.label.color = "black"
)
coords_mds <- layout_with_mds(sociogram)
coords_adj <- layout_with_fr(
sociogram,
coords = coords_mds,
niter = 300  # 200~500 사이에서 조절 가능
)
plot(
sociogram,
layout = coords_adj,
vertex.size = 30,
vertex.label.cex = 0.6,
vertex.label.color = "black"
)
coords_mds <- layout_with_mds(sociogram)
coords_adj <- layout_with_fr(
sociogram,
coords = coords_mds,
niter = 300  # 200~500 사이에서 조절 가능
)
plot(
sociogram,
layout = coords_adj,
vertex.size = 20,
vertex.label.cex = 0.6,
vertex.label.color = "black"
)
coords_mds <- layout_with_mds(sociogram)
coords_adj <- layout_with_fr(
sociogram,
coords = coords_mds,
niter = 500
)
plot(
sociogram,
layout = coords_adj,
vertex.size = 20,
vertex.label.cex = 0.6,
vertex.label.color = "black"
)
coords_mds <- layout_with_mds(sociogram)
coords_adj <- layout_with_fr(
sociogram,
coords = coords_mds,
niter = 1000
)
plot(
sociogram,
layout = coords_adj,
vertex.size = 20,
vertex.label.cex = 0.6,
vertex.label.color = "black"
)
coords_mds <- layout_with_mds(sociogram)
coords_adj <- layout_with_fr(
sociogram,
coords = coords_mds,
niter = 5000
)
plot(
sociogram,
layout = coords_adj,
vertex.size = 20,
vertex.label.cex = 0.6,
vertex.label.color = "black"
)
coords_mds <- layout_with_mds(sociogram)
coords_adj <- layout_with_fr(
sociogram,
coords = coords_mds,
niter = 10000
)
plot(
sociogram,
layout = coords_adj,
vertex.size = 20,
vertex.label.cex = 0.6,
vertex.label.color = "black"
)
coords_mds <- layout_with_mds(sociogram)
coords_adj <- layout_with_fr(
sociogram,
coords = coords_mds,
niter = 100000
)
plot(
sociogram,
layout = coords_adj,
vertex.size = 20,
vertex.label.cex = 0.6,
vertex.label.color = "black"
)
coords_mds <- layout_with_mds(sociogram)
# 🔹 ① 좌표 확장
coords_scaled <- scale(coords_mds) * 5   # 숫자 3~10 사이에서 조절 가능
plot(
sociogram,
layout = coords_scaled,
vertex.size = 20,
vertex.label.cex = 0.6,
vertex.label.color = "black"
)
)
coords_mds <- layout_with_mds(sociogram)
# 🔹 ① 좌표 확장
coords_scaled <- scale(coords_mds) * 5   # 숫자 3~10 사이에서 조절 가능
plot(
sociogram,
layout = coords_scaled,
vertex.size = 20,
vertex.label.cex = 0.6,
vertex.label.color = "black
)
coords_mds <- layout_with_mds(sociogram)
# 🔹 ① 좌표 확장
coords_scaled <- scale(coords_mds) * 5   # 숫자 3~10 사이에서 조절 가능
plot(
sociogram,
layout = coords_scaled,
vertex.size = 20,
vertex.label.cex = 0.6,
vertex.label.color = "black""
)
coords_mds <- layout_with_mds(sociogram)
# 🔹 ① 좌표 확장
coords_scaled <- scale(coords_mds) * 5   # 숫자 3~10 사이에서 조절 가능
plot(
sociogram,
layout = coords_scaled,
vertex.size = 20,
vertex.label.cex = 0.6,
vertex.label.color = "black"
)
coords_mds <- layout_with_mds(sociogram)
# 🔹 ① 좌표 확장
coords_scaled <- scale(coords_mds) * 10   # 숫자 3~10 사이에서 조절 가능
plot(
sociogram,
layout = coords_scaled,
vertex.size = 20,
vertex.label.cex = 0.6,
vertex.label.color = "black"
)
coords_mds <- layout_with_mds(sociogram)
# 🔹 ① 좌표 확장
coords_scaled <- scale(coords_mds) * 10   # 숫자 3~10 사이에서 조절 가능
plot(
sociogram,
layout = coords_scaled,
vertex.size = 20,
vertex.label.cex = 0.6,
vertex.label.color = "black"
)
coords_mds <- layout_with_mds(sociogram)
coords_adj <- layout_with_fr(
sociogram,
coords = coords_mds,
niter = 100000
)
plot(
sociogram,
layout = coords_adj,
vertex.size = 20,
vertex.label.cex = 0.6,
vertex.label.color = "black"
)
coords_mds <- layout_with_mds(sociogram)
coords_adj <- layout_with_fr(
sociogram,
coords = coords_mds,
niter = 1000000
)
plot(
sociogram,
layout = coords_adj,
vertex.size = 20,
vertex.label.cex = 0.6,
vertex.label.color = "black"
)
coords_mds <- layout_with_mds(sociogram)
coords_adj <- layout_with_fr(
sociogram,
coords = coords_mds,
niter = 100000
)
plot(
sociogram,
layout = coords_adj,
vertex.size = 20,
vertex.label.cex = 0.6,
vertex.label.color = "black"
)
coords_mds <- layout_with_mds(sociogram)
coords_adj <- layout_with_fr(
sociogram,
coords = coords_mds,
niter = 10000
)
plot(
sociogram,
layout = coords_adj,
vertex.size = 20,
vertex.label.cex = 0.6,
vertex.label.color = "black"
)
